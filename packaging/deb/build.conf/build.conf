#!/bin/bash
# Building script
# #########################

root="$cwd/fakeroot/"

bin_dir="$libexecdir/xm"
res_dir="$localstatedir/lib/xm"
conf_dir="$sysconfdir/xm"
share_dir="$prefix/share/xm"

backend="$cwd/backend"
frontend="$cwd/web"

do_fetch () {
	# Get backend from github
	rm -R "$backend"
	mkdir -p "$backend"
	git clone git://github.com/Double-U/XenMaster.git "$backend"

	# Get frontend from github
	rm -R "$frontend"
	mkdir -p "$frontend"
	git clone git://github.com/NoSTaBoNN/XenMaster-WebUI.git "$frontend"
	rm -R "$frontend/.git"
	rm -R "$frontend/.git*"
}

do_build () {
	do_fetch
	set_java

	if [[ ! -f "$jar" ]]; then
		# Build a copy of XenMaster backend
		cd "$backend"
		echo "Start build using Maven"
		mvn clean install -q -Dmaven.test.skip=true
		cd "$cwd"
	fi

	# Build start.sh
	start_script="$cwd/start.sh"
	start="$cwd/build.conf/start.conf"
	echo "#!/bin/bash" > $start_script
	echo "jar=\"$share_dir/XenMaster.jar\"" >> $start_script
	echo "config=\"$conf_dir/settings.xml\"" >> $start_script
	cat $start >> $start_script
}

do_setup () {
	# Copy everything into place

	if [[ ${#root} -gt 0 ]]; then
		rm -R "$root"
		mkdir -p "$root"
	fi

	# Create necessary directories
	mkdir -p "$root$bin_dir"
	mkdir -p "$root$res_dir"
	mkdir -p "$root$conf_dir"
	mkdir -p "$root$prefix/bin"
	mkdir -p "$root$share_dir"
	mkdir -p "$root$prefix/share/doc"
	mkdir -p "$root$prefix/share/man/man1/"
	
	if [[ ${#root} -gt 0 ]]; then
		mkdir -p "$root$prefix/share/lintian/overrides/"
	fi
}

do_install () {
	do_build
	do_setup

	cp "$cwd/build.conf/settings.conf" "$root$conf_dir/settings.xml"
	cp -R "$backend/store" "$root$res_dir"
	cp -R "$frontend" "$root$res_dir"

	if [[ -f "$jar" ]]; then
		cp "$jar" "$root$share_dir/XenMaster.jar"
	else
		cp "$backend/target/XenMaster-jar-with-dependencies.jar" "$root$share_dir/XenMaster.jar"
	fi
	cp "$start_script" "$root$bin_dir/launch.sh"
	chmod +x "$root$bin_dir/launch.sh"

	# Generate necessary symlinks
	ln -s "../lib/xm/launch.sh" "$root$prefix/bin/xenmaster"
	ln -s "$res_dir/store/setup" "$root$conf_dir/preseed"

	if [[ ${#root} -gt 0 ]]; then
		cp -R "$cwd/debian" "${root}DEBIAN"
		cp -R "${cwd}/doc" "$root$prefix/share/doc/xenmaster"
		mv "$root$prefix/share/doc/xenmaster/xenmaster.man" "$root$prefix/share/man/man1/xenmaster.1"
		cp "${cwd}/lintian/overrides" "$root$prefix/share/lintian/overrides/xenmaster"
		
		gzip -9 "$root$prefix/share/doc/xenmaster/changelog"
		gzip -9 "$root$prefix/share/man/man1/xenmaster.1"
	fi
}

do_package () {
	do_install
	dpkg -b "$root" "xenmaster-0.1.deb"
}

do_clean () {
	rm "$root$conf_dir/settings.xml"
	rm "$root$prefix/share/XenMaster.jar"
	rm "$root$bin_dir/launch.sh"
	rm "$root$prefix/bin/xenmaster"
	rm "$res_dir/store/setup" "$root$conf_dir/preseed"

	rm -R "$root$res_dir"
	rm -R "$root$bin_dir"
	rm -R "$root$share_dir"
	rm -R "$root$prefix/share/doc"
	rm -R "$root$prefix/man/man1/"

	rm "start.sh"

	rm -R "$backend"
	rm -R "$frontend"
	
}

set_java () {
	# Setup JAVA_HOME
	export JAVA_HOME="/usr/lib/jvm/java-1.7.0-openjdk-`dpkg --print-architecture`"
	JAVA="$JAVA_HOME/jre/bin/java"
}

set_root () {
	root="$1"
}

case "$1" in
	install)
		set_root ""
		do_install
	;;
	package)
		set_root "$cwd/fakeroot/"
		do_package
	;;
	clean)
		set_root ""
		do_clean
	;;
	clean_package)
		set_root "$cwd/fakeroot/"
		do_clean
		rm -R "$root"
	;;
	*)
		echo "Usage: build.sh {install|package|clean|clean_package}"
		exit 3
	;;
esac

echo "done"

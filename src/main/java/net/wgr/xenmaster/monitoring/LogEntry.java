/*
 * Made by Wannes 'W' De Smet
 * (c) 2011 Wannes De Smet
 * All rights reserved.
 * 
 */
package net.wgr.xenmaster.monitoring;

import java.util.Locale;
import net.wgr.core.dao.AutoGenerated;
import net.wgr.lang.I18N;

/**
 * 
 * @created Oct 23, 2011
 * @author double-u
 */
public class LogEntry extends net.wgr.core.dao.Object {

    @AutoGenerated(strategy=AutoGenerated.GenerationStrategy.SEQUENTIAL)
    protected int id;
    protected String reference;
    protected String entityType;
    protected long date;
    protected String title, message;
    protected Level level;

    public LogEntry(String reference, String entityType, String title, String message, Level level) {
        this.reference = reference;
        this.entityType = entityType;
        this.title = title;
        this.message = message;
        this.level = level;
        this.date = System.currentTimeMillis();
    }
    
    public LogEntry(String reference, Class entityType, String title, Level level) {
        this.reference = reference;
        this.entityType = entityType.getSimpleName();
        this.title = title.replace('_', ' ');
        this.message = I18N.get().getTextForLocale(title, Locale.ENGLISH);
        this.level = level;
        this.date = System.currentTimeMillis();
    }

    public String getEntityType() {
        return entityType;
    }

    public Level getLevel() {
        return level;
    }

    public String getMessage() {
        return message;
    }

    public String getReference() {
        return reference;
    }

    public String getTitle() {
        return title;
    }

    @Override
    public String getColumnFamily() {
        return "logs";
    }

    @Override
    public String getKeyFieldName() {
        return "id";
    }

    @Override
    public void delete() {
        throw new IllegalAccessError("Only a LogKeeper can remove a LogEntry");
    }

    @Override
    public void insert() {
        throw new IllegalAccessError("Only a LogKeeper can insert a LogEntry");
    }

    public void insert(LogKeeper keeper) {
        super.insert();
    }

    protected void delete(LogKeeper keeper) {
        super.delete();
    }

    public static enum Level {

        ERROR, WARNING, SUCCESS, INFORMATION, DETAIL;

        public org.apache.log4j.Level toLog4jLevel() {
            switch (this) {
                case DETAIL:
                    return org.apache.log4j.Level.DEBUG;
                case INFORMATION:
                    return org.apache.log4j.Level.INFO;
                case WARNING:
                    return org.apache.log4j.Level.WARN;
                case ERROR:
                    return org.apache.log4j.Level.ERROR;
                default:
                    return org.apache.log4j.Level.FATAL;
            }
        }
    }
}
